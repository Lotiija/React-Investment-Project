{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/investment-prj/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/mac/Desktop/investment-prj/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Header from \"./Header\";\nimport ResultsTable from \"./ResultsTable\";\nimport UserInput from \"./UserInput\";\nimport logo from \"./assets/investment-calculator-logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    userInput = _useState2[0],\n    setUserInput = _useState2[1];\n  var calculateHandler = function calculateHandler(userInput) {\n    setUserInput[userInput];\n  };\n  var yearlyData = []; // per-year results\n\n  if (userInput) {\n    var currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    var yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    var expectedReturn = +userInput[\"expected-return\"] / 100;\n    var duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (var i = 0; i < duration; i++) {\n      var yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    // do something with yearlyData ...\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center',\n        color: 'red'\n      },\n      children: \" No investment calculated yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(ResultsTable, {\n      data: yearlyData,\n      initialInvestment: userInput['current-savings']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCOotz9vTgzH/m310d2/03oFEtk=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","ResultsTable","UserInput","logo","jsxDEV","_jsxDEV","App","_s","_useState","_useState2","_slicedToArray","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","style","textAlign","color","data","initialInvestment","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/investment-prj/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Header from \"./Header\";\nimport ResultsTable from \"./ResultsTable\";\nimport UserInput from \"./UserInput\";\nimport logo from \"./assets/investment-calculator-logo.png\";\n\nfunction App() {\n  const [userInput, setUserInput] = useState(null);\n\n  const calculateHandler = (userInput) => {\n    setUserInput[userInput];\n  };\n\n  const yearlyData = []; // per-year results\n\n  if (userInput) {\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution\n        });\n    }\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n\n      <UserInput onCalculate={calculateHandler}/>\n\n      {!userInput && <p style={{textAlign: 'center', color: 'red'}}> No investment calculated yet.</p>}\n      {userInput && <ResultsTable data={yearlyData} initialInvestment={userInput['current-savings']} />}\n\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,IAAI,MAAM,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAAC,SAAA,GAAkCT,QAAQ,CAAC,IAAI,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAE9B,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIF,SAAS,EAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;EACzB,CAAC;EAED,IAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIH,SAAS,EAAE;IAEb,IAAII,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,IAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,IAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,IAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MAC/B,IAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACN;IACA;EACF;EAAC;EAED,oBACEX,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACL,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVvB,OAAA,CAACH,SAAS;MAAC2B,WAAW,EAAEhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAE1C,CAACjB,SAAS,iBAAIN,OAAA;MAAGyB,KAAK,EAAE;QAACC,SAAS,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAK,CAAE;MAAAR,QAAA,EAAC;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC/FjB,SAAS,iBAAIN,OAAA,CAACJ,YAAY;MAACgC,IAAI,EAAEnB,UAAW;MAACoB,iBAAiB,EAAEvB,SAAS,CAAC,iBAAiB;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE9F,CAAC;AAEV;AAACrB,EAAA,CA1CQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA0CX;AAED,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}